// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    bases         Base[] 
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

// Model for an Airtable "Base" (like a spreadsheet file)
model Base {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String // Foreign key to link to the User who owns this base
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tables    Table[] // A base can contain many tables
}

// Model for an Airtable "Table" within a Base
model Table {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  baseId    String // Foreign key to link to the Base it belongs to
  base      Base     @relation(fields: [baseId], references: [id], onDelete: Cascade)

  // Columns for this table will be stored in a separate `Column` model, linked to this Table
  columns   Column[] // A table can have many columns (for Day 3)
  rows      Row[]    // A table can have many rows (for Day 3)
  views     View[]   // A table can have many views (for Day 7/8)
}

enum ColumnType {
  TEXT
  NUMBER
  // Add more types later: DATE, BOOLEAN, SINGLE_SELECT, etc.
}

model Column {
  id        String     @id @default(cuid())
  name      String
  type      ColumnType
  position  Int        @default(0) // To define column order
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  tableId   String     // Foreign key to link to the Table it belongs to
  table     Table      @relation(fields: [tableId], references: [id], onDelete: Cascade)

  cells     Cell[]     // A column can have many cells
}

// Model for Rows within a Table
model Row {
  id        String     @id @default(cuid())
  position  Int        @default(0) // To define row order
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  tableId   String     // Foreign key to link to the Table it belongs to
  table     Table      @relation(fields: [tableId], references: [id], onDelete: Cascade)

  cells     Cell[]     // A row can have many cells
  @@index([tableId, position])
}

model Cell {
  id        String     @id @default(cuid())
  value     String     // Store as string, parse based on ColumnType in app logic
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  rowId     String
  row       Row        @relation(fields: [rowId], references: [id], onDelete: Cascade)

  columnId  String
  column    Column     @relation(fields: [columnId], references: [id], onDelete: Cascade)

  // Ensure unique cell per row-column combination
  @@unique([rowId, columnId])
  @@index([value])
}

model View {
  id        String   @id @default(cuid())
  name      String
  // Storing configurations as JSON strings for flexibility
  filterConfig Json?
  sortConfig   Json?
  hiddenColumns Json? // Array of column IDs
  searchQuery String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tableId   String   // Foreign key to link to the Table it belongs to
  table     Table    @relation(fields: [tableId], references: [id], onDelete: Cascade)
}

